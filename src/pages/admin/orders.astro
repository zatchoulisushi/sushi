---
import AdminLayout from '../../components/admin/AdminLayout.astro';
import { Search, Filter, Eye, Check, X, Clock } from 'lucide-astro';
---

<AdminLayout title="Gestion des commandes" activeSection="orders">
  <!-- Filters -->
  <div class="flex flex-col sm:flex-row gap-4 mb-8">
    <div class="flex-1">
      <div class="relative">
        <Search size={20} class="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50" />
        <input 
          type="text" 
          id="search-orders"
          placeholder="Rechercher par numéro de commande..." 
          class="w-full pl-12 pr-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-primary-600"
        />
      </div>
    </div>
    
    <select id="status-filter" class="px-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white focus:outline-none focus:border-primary-600">
      <option value="">Tous les statuts</option>
      <option value="pending">En attente</option>
      <option value="confirmed">Confirmées</option>
      <option value="preparing">En préparation</option>
      <option value="ready">Prêtes</option>
      <option value="delivered">Livrées</option>
      <option value="cancelled">Annulées</option>
    </select>
    
    <select id="type-filter" class="px-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white focus:outline-none focus:border-primary-600">
      <option value="">Tous les types</option>
      <option value="dine_in">Sur place</option>
      <option value="takeaway">À emporter</option>
      <option value="delivery">Livraison</option>
    </select>
  </div>

  <!-- Orders Table -->
  <div class="admin-card">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr class="border-b border-white/10">
            <th class="text-left py-4 px-4 text-white/80 font-medium">Commande</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Client</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Type</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Statut</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Total</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Date</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Actions</th>
          </tr>
        </thead>
        <tbody id="orders-table-body">
          <!-- Orders will be loaded here -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Order Details Modal -->
  <div id="order-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
    <div class="bg-dark-900 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-white/10 flex items-center justify-between">
        <h2 id="modal-title" class="text-xl font-bold text-white">Détails de la commande</h2>
        <button id="close-order-modal" class="p-2 hover:bg-white/10 rounded-full transition-colors">
          <X size={20} class="text-white/70" />
        </button>
      </div>
      
      <div id="order-modal-content" class="p-6">
        <!-- Order details will be loaded here -->
      </div>
    </div>
  </div>
</AdminLayout>

<style>
  .admin-card {
    @apply p-6 bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10;
  }
  
  .status-badge {
    @apply px-3 py-1 text-xs font-medium rounded-full;
  }
  
  .action-btn {
    @apply p-2 rounded-lg transition-colors;
  }
</style>

<script>
  import { supabase } from '../../lib/supabase';

  let orders = [];
  let filteredOrders = [];

  async function loadOrders() {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select(`
          *,
          user:users(first_name, last_name, email, phone),
          items:order_items(
            *,
            product:products(name, image_url),
            variant:product_variants(name)
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      orders = data || [];
      filteredOrders = [...orders];
      displayOrders();
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  }

  function displayOrders() {
    const tbody = document.getElementById('orders-table-body');
    if (!tbody) return;

    tbody.innerHTML = filteredOrders.map(order => `
      <tr class="border-b border-white/5 hover:bg-white/5">
        <td class="py-4 px-4">
          <div>
            <p class="font-semibold text-white">#${order.order_number}</p>
            <p class="text-sm text-white/60">${order.items?.length || 0} article(s)</p>
          </div>
        </td>
        <td class="py-4 px-4">
          <div>
            <p class="text-white">${order.user ? `${order.user.first_name} ${order.user.last_name}` : 'Client invité'}</p>
            <p class="text-sm text-white/60">${order.user?.phone || 'N/A'}</p>
          </div>
        </td>
        <td class="py-4 px-4">
          <span class="px-2 py-1 text-xs rounded-full ${getTypeColor(order.order_type)}">${getTypeText(order.order_type)}</span>
        </td>
        <td class="py-4 px-4">
          <select class="status-select bg-transparent border-none text-sm ${getStatusColor(order.status)}" data-order-id="${order.id}" data-current-status="${order.status}">
            <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>En attente</option>
            <option value="confirmed" ${order.status === 'confirmed' ? 'selected' : ''}>Confirmée</option>
            <option value="preparing" ${order.status === 'preparing' ? 'selected' : ''}>En préparation</option>
            <option value="ready" ${order.status === 'ready' ? 'selected' : ''}>Prête</option>
            <option value="delivered" ${order.status === 'delivered' ? 'selected' : ''}>Livrée</option>
            <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Annulée</option>
          </select>
        </td>
        <td class="py-4 px-4">
          <p class="font-bold text-primary-500">${order.total_amount.toFixed(2)}€</p>
        </td>
        <td class="py-4 px-4">
          <p class="text-white">${new Date(order.created_at).toLocaleDateString('fr-FR')}</p>
          <p class="text-sm text-white/60">${new Date(order.created_at).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</p>
        </td>
        <td class="py-4 px-4">
          <button class="action-btn hover:bg-blue-600/20 text-blue-400" onclick="viewOrder('${order.id}')">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
          </button>
        </td>
      </tr>
    `).join('');

    // Add event listeners for status changes
    document.querySelectorAll('.status-select').forEach(select => {
      select.addEventListener('change', async (e) => {
        const orderId = e.target.getAttribute('data-order-id');
        const newStatus = e.target.value;
        const currentStatus = e.target.getAttribute('data-current-status');
        
        if (newStatus !== currentStatus) {
          await updateOrderStatus(orderId, newStatus);
          e.target.setAttribute('data-current-status', newStatus);
          e.target.className = `status-select bg-transparent border-none text-sm ${getStatusColor(newStatus)}`;
        }
      });
    });
  }

  async function updateOrderStatus(orderId, status) {
    try {
      const { error } = await supabase
        .from('orders')
        .update({ 
          status,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (error) throw error;

      // Update local data
      const orderIndex = orders.findIndex(o => o.id === orderId);
      if (orderIndex !== -1) {
        orders[orderIndex].status = status;
        filteredOrders = filteredOrders.map(o => o.id === orderId ? { ...o, status } : o);
      }

      showNotification('Statut mis à jour avec succès', 'success');
    } catch (error) {
      console.error('Error updating order status:', error);
      showNotification('Erreur lors de la mise à jour', 'error');
    }
  }

  function viewOrder(orderId) {
    const order = orders.find(o => o.id === orderId);
    if (!order) return;

    const modal = document.getElementById('order-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('order-modal-content');

    modalTitle.textContent = `Commande #${order.order_number}`;
    
    modalContent.innerHTML = `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
          <h3 class="text-lg font-semibold text-white mb-4">Informations client</h3>
          <div class="space-y-3">
            <div>
              <span class="text-white/60">Nom:</span>
              <span class="text-white ml-2">${order.user ? `${order.user.first_name} ${order.user.last_name}` : 'Client invité'}</span>
            </div>
            <div>
              <span class="text-white/60">Email:</span>
              <span class="text-white ml-2">${order.user?.email || 'N/A'}</span>
            </div>
            <div>
              <span class="text-white/60">Téléphone:</span>
              <span class="text-white ml-2">${order.user?.phone || 'N/A'}</span>
            </div>
            ${order.delivery_address ? `
              <div>
                <span class="text-white/60">Adresse:</span>
                <span class="text-white ml-2">${order.delivery_address}</span>
              </div>
            ` : ''}
            ${order.special_instructions ? `
              <div>
                <span class="text-white/60">Instructions:</span>
                <span class="text-white ml-2">${order.special_instructions}</span>
              </div>
            ` : ''}
          </div>
        </div>
        
        <div>
          <h3 class="text-lg font-semibold text-white mb-4">Détails commande</h3>
          <div class="space-y-3">
            <div>
              <span class="text-white/60">Type:</span>
              <span class="text-white ml-2">${getTypeText(order.order_type)}</span>
            </div>
            <div>
              <span class="text-white/60">Statut:</span>
              <span class="ml-2 px-2 py-1 text-xs rounded-full ${getStatusColor(order.status)}">${getStatusText(order.status)}</span>
            </div>
            <div>
              <span class="text-white/60">Date:</span>
              <span class="text-white ml-2">${new Date(order.created_at).toLocaleString('fr-FR')}</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="mt-8">
        <h3 class="text-lg font-semibold text-white mb-4">Articles commandés</h3>
        <div class="space-y-4">
          ${order.items?.map(item => `
            <div class="flex items-center space-x-4 p-4 bg-white/5 rounded-xl">
              <img src="${item.product.image_url}" alt="${item.product.name}" class="w-16 h-16 object-cover rounded-lg">
              <div class="flex-1">
                <h4 class="font-semibold text-white">${item.product.name}</h4>
                ${item.variant ? `<p class="text-sm text-white/60">${item.variant.name}</p>` : ''}
                ${item.special_instructions ? `<p class="text-sm text-white/60">Instructions: ${item.special_instructions}</p>` : ''}
              </div>
              <div class="text-right">
                <p class="text-white">Qté: ${item.quantity}</p>
                <p class="font-bold text-primary-500">${item.total_price.toFixed(2)}€</p>
              </div>
            </div>
          `).join('') || '<p class="text-white/60">Aucun article</p>'}
        </div>
      </div>
      
      <div class="mt-8 p-4 bg-white/5 rounded-xl">
        <div class="flex justify-between items-center text-lg font-bold text-white">
          <span>Total</span>
          <span class="text-primary-500">${order.total_amount.toFixed(2)}€</span>
        </div>
      </div>
    `;

    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  function filterOrders() {
    const searchTerm = document.getElementById('search-orders')?.value.toLowerCase() || '';
    const statusFilter = document.getElementById('status-filter')?.value || '';
    const typeFilter = document.getElementById('type-filter')?.value || '';

    filteredOrders = orders.filter(order => {
      const matchesSearch = order.order_number.toLowerCase().includes(searchTerm) ||
                           (order.user && `${order.user.first_name} ${order.user.last_name}`.toLowerCase().includes(searchTerm));
      const matchesStatus = !statusFilter || order.status === statusFilter;
      const matchesType = !typeFilter || order.order_type === typeFilter;

      return matchesSearch && matchesStatus && matchesType;
    });

    displayOrders();
  }

  function getStatusColor(status) {
    const colors = {
      pending: 'text-yellow-400',
      confirmed: 'text-blue-400',
      preparing: 'text-orange-400',
      ready: 'text-green-400',
      delivered: 'text-green-400',
      cancelled: 'text-red-400'
    };
    return colors[status] || colors.pending;
  }

  function getStatusText(status) {
    const texts = {
      pending: 'En attente',
      confirmed: 'Confirmée',
      preparing: 'En préparation',
      ready: 'Prête',
      delivered: 'Livrée',
      cancelled: 'Annulée'
    };
    return texts[status] || status;
  }

  function getTypeColor(type) {
    const colors = {
      dine_in: 'bg-blue-600/20 text-blue-400',
      takeaway: 'bg-green-600/20 text-green-400',
      delivery: 'bg-purple-600/20 text-purple-400'
    };
    return colors[type] || colors.dine_in;
  }

  function getTypeText(type) {
    const texts = {
      dine_in: 'Sur place',
      takeaway: 'À emporter',
      delivery: 'Livraison'
    };
    return texts[type] || type;
  }

  function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-6 py-3 rounded-xl text-white z-50 ${type === 'success' ? 'bg-green-600' : 'bg-red-600'}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 3000);
  }

  // Event listeners
  document.getElementById('search-orders')?.addEventListener('input', filterOrders);
  document.getElementById('status-filter')?.addEventListener('change', filterOrders);
  document.getElementById('type-filter')?.addEventListener('change', filterOrders);

  document.getElementById('close-order-modal')?.addEventListener('click', () => {
    document.getElementById('order-modal')?.classList.add('hidden');
    document.getElementById('order-modal')?.classList.remove('flex');
  });

  // Global function for viewing orders
  (window as any).viewOrder = viewOrder;

  // Load orders on page load
  loadOrders();
</script>
</div>