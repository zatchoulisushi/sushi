---
import AdminLayout from '../../components/admin/AdminLayout.astro';
import { Search, Filter, Eye, Check, X, Clock } from 'lucide-astro';
import { getCollection } from 'astro:content';

// Load orders data at build time using Content Layer
const orders = await getCollection('orders');

// Sort orders by creation date (most recent first)
const sortedOrders = orders.sort((a, b) => 
  new Date(b.data.created_at).getTime() - new Date(a.data.created_at).getTime()
);
---

<AdminLayout title="Gestion des commandes" activeSection="orders">
  <!-- Filters -->
  <div class="flex flex-col sm:flex-row gap-4 mb-8">
    <div class="flex-1">
      <div class="relative">
        <Search size={20} class="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50" />
        <input 
          type="text" 
          id="search-orders"
          placeholder="Rechercher par numéro de commande..." 
          class="w-full pl-12 pr-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-primary-600"
        />
      </div>
    </div>
    
    <select id="status-filter" class="px-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white focus:outline-none focus:border-primary-600">
      <option value="">Tous les statuts</option>
      <option value="pending">En attente</option>
      <option value="confirmed">Confirmées</option>
      <option value="preparing">En préparation</option>
      <option value="ready">Prêtes</option>
      <option value="delivered">Livrées</option>
      <option value="cancelled">Annulées</option>
    </select>
    
    <select id="type-filter" class="px-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white focus:outline-none focus:border-primary-600">
      <option value="">Tous les types</option>
      <option value="dine_in">Sur place</option>
      <option value="takeaway">À emporter</option>
      <option value="delivery">Livraison</option>
    </select>
  </div>

  <!-- Orders Table -->
  <div class="admin-card">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr class="border-b border-white/10">
            <th class="text-left py-4 px-4 text-white/80 font-medium">Commande</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Client</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Type</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Statut</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Total</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Date</th>
            <th class="text-left py-4 px-4 text-white/80 font-medium">Actions</th>
          </tr>
        </thead>
        <tbody id="orders-table-body">
          {sortedOrders.length > 0 ? (
            sortedOrders.map(order => (
              <tr class="border-b border-white/5 hover:bg-white/5 transition-colors">
                <td class="py-4 px-4">
                  <div>
                    <p class="font-semibold text-white">#{order.data.order_number}</p>
                    <p class="text-sm text-white/60">
                      {order.data.special_instructions || 'Aucune instruction'}
                    </p>
                  </div>
                </td>
                <td class="py-4 px-4">
                  <p class="text-white">{order.data.user_id}</p>
                </td>
                <td class="py-4 px-4">
                  <span class={`px-3 py-1 rounded-full text-xs font-medium ${
                    order.data.order_type === 'delivery' ? 'bg-blue-600/20 text-blue-400' :
                    order.data.order_type === 'takeaway' ? 'bg-green-600/20 text-green-400' :
                    'bg-purple-600/20 text-purple-400'
                  }`}>
                    {order.data.order_type === 'delivery' ? 'Livraison' :
                     order.data.order_type === 'takeaway' ? 'À emporter' :
                     'Sur place'}
                  </span>
                </td>
                <td class="py-4 px-4">
                  <span class={`px-3 py-1 rounded-full text-xs font-medium ${
                    order.data.status === 'delivered' ? 'bg-green-600/20 text-green-400' :
                    order.data.status === 'pending' ? 'bg-yellow-600/20 text-yellow-400' :
                    order.data.status === 'cancelled' ? 'bg-red-600/20 text-red-400' :
                    'bg-blue-600/20 text-blue-400'
                  }`}>
                    {order.data.status === 'delivered' ? 'Livrée' :
                     order.data.status === 'pending' ? 'En attente' :
                     order.data.status === 'cancelled' ? 'Annulée' :
                     order.data.status}
                  </span>
                </td>
                <td class="py-4 px-4">
                  <p class="font-bold text-primary-500">{order.data.total_amount.toFixed(2)}€</p>
                </td>
                <td class="py-4 px-4">
                  <p class="text-white/80">{new Date(order.data.created_at).toLocaleDateString('fr-FR')}</p>
                  <p class="text-sm text-white/60">{new Date(order.data.created_at).toLocaleTimeString('fr-FR')}</p>
                </td>
                <td class="py-4 px-4">
                  <div class="flex gap-2">
                    <button class="p-2 hover:bg-blue-600/20 text-blue-400 rounded-lg transition-colors" 
                            onclick={`viewOrder('${order.data.id}')`}
                            title="Voir les détails">
                      <Eye size={16} />
                    </button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colspan="7" class="py-12 text-center text-white/60">
                Aucune commande trouvée
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Order Details Modal -->
  <div id="order-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
    <div class="bg-dark-900 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-white/10 flex items-center justify-between">
        <h2 id="modal-title" class="text-xl font-bold text-white">Détails de la commande</h2>
        <button id="close-order-modal" class="p-2 hover:bg-white/10 rounded-full transition-colors">
          <X size={20} class="text-white/70" />
        </button>
      </div>
      
      <div id="order-modal-content" class="p-6">
        <!-- Order details will be loaded here -->
      </div>
    </div>
  </div>
</AdminLayout>

<style>
  .admin-card {
    @apply p-6 bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10;
  }
  
  .status-badge {
    @apply px-3 py-1 text-xs font-medium rounded-full;
  }
  
  .action-btn {
    @apply p-2 rounded-lg transition-colors;
  }
</style>

<script define:vars={{ sortedOrders }}>
  // Simplified admin orders script for static version
  
  function viewOrder(orderId) {
    const order = sortedOrders.find(o => o.data.id === orderId);
    if (!order) {
      alert('Ordre non trouvé');
      return;
    }

    const modal = document.getElementById('order-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalContent = document.getElementById('order-modal-content');

    modalTitle.textContent = `Commande #${order.data.order_number}`;
    
    modalContent.innerHTML = `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
          <h3 class="text-lg font-semibold text-white mb-4">Informations client</h3>
          <div class="space-y-3">
            <div>
              <span class="text-white/60">ID Client:</span>
              <span class="text-white ml-2">${order.data.user_id}</span>
            </div>
            ${order.data.delivery_address ? `
              <div>
                <span class="text-white/60">Adresse:</span>
                <span class="text-white ml-2">${order.data.delivery_address}</span>
              </div>
            ` : ''}
            ${order.data.special_instructions ? `
              <div>
                <span class="text-white/60">Instructions:</span>
                <span class="text-white ml-2">${order.data.special_instructions}</span>
              </div>
            ` : ''}
          </div>
        </div>
        
        <div>
          <h3 class="text-lg font-semibold text-white mb-4">Détails commande</h3>
          <div class="space-y-3">
            <div>
              <span class="text-white/60">Type:</span>
              <span class="text-white ml-2">${order.data.order_type}</span>
            </div>
            <div>
              <span class="text-white/60">Statut:</span>
              <span class="text-white ml-2">${order.data.status}</span>
            </div>
            <div>
              <span class="text-white/60">Date:</span>
              <span class="text-white ml-2">${new Date(order.data.created_at).toLocaleString('fr-FR')}</span>
            </div>
          </div>
        </div>
      </div>
      
      <div class="mt-8 p-4 bg-white/5 rounded-xl">
        <div class="flex justify-between items-center text-lg font-bold text-white">
          <span>Total</span>
          <span class="text-primary-500">${order.data.total_amount.toFixed(2)}€</span>
        </div>
      </div>
      
      <div class="mt-4 p-4 bg-yellow-600/20 text-yellow-400 rounded-xl">
        <p class="text-sm">
          Note: La gestion complète des commandes nécessite une base de données temps réel. 
          Cette version statique affiche les données chargées au moment du build.
        </p>
      </div>
    `;

    modal.classList.remove('hidden');
    modal.classList.add('flex');
  }

  // Close modal
  document.getElementById('close-order-modal')?.addEventListener('click', () => {
    document.getElementById('order-modal')?.classList.add('hidden');
    document.getElementById('order-modal')?.classList.remove('flex');
  });

  // Global function for viewing orders
  window.viewOrder = viewOrder;
</script>