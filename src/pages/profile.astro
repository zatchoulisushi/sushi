---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { User, MapPin, Phone, Mail, Award, Clock, Package } from 'lucide-astro';
---

<Layout>
  <Header />
  <main class="pt-16 min-h-screen">
    <section class="py-20 px-4 sm:px-6 lg:px-8">
      <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
          <h1 class="text-4xl sm:text-5xl font-bold mb-6 bg-gradient-to-r from-white to-primary-500 bg-clip-text text-transparent">
            Mon Profil
          </h1>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Profile Info -->
          <div class="lg:col-span-2 space-y-8">
            <!-- Personal Information -->
            <div class="profile-card">
              <h2 class="text-xl font-bold text-white mb-6 flex items-center">
                <User size={24} class="mr-3 text-primary-600" />
                Informations personnelles
              </h2>
              
              <form id="profile-form" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-white/80 mb-2">Prénom</label>
                    <input type="text" name="firstName" class="form-input" placeholder="Votre prénom">
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-white/80 mb-2">Nom</label>
                    <input type="text" name="lastName" class="form-input" placeholder="Votre nom">
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-white/80 mb-2">Email</label>
                  <input type="email" name="email" class="form-input" placeholder="votre@email.com" readonly>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-white/80 mb-2">Téléphone</label>
                  <input type="tel" name="phone" class="form-input" placeholder="01 23 45 67 89">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-white/80 mb-2">Adresse</label>
                  <input type="text" name="address" class="form-input" placeholder="123 Rue de la Paix">
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-white/80 mb-2">Ville</label>
                    <input type="text" name="city" class="form-input" placeholder="Paris">
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-white/80 mb-2">Code postal</label>
                    <input type="text" name="postalCode" class="form-input" placeholder="75001">
                  </div>
                </div>
                
                <button type="submit" class="btn-primary">
                  Mettre à jour le profil
                </button>
              </form>
            </div>

            <!-- Order History -->
            <div class="profile-card">
              <h2 class="text-xl font-bold text-white mb-6 flex items-center">
                <Package size={24} class="mr-3 text-primary-600" />
                Historique des commandes
              </h2>
              
              <div id="order-history" class="space-y-4">
                <!-- Orders will be loaded here -->
              </div>
            </div>
          </div>

          <!-- Sidebar -->
          <div class="space-y-8">
            <!-- Loyalty Card -->
            <div class="profile-card">
              <h2 class="text-xl font-bold text-white mb-6 flex items-center">
                <Award size={24} class="mr-3 text-primary-600" />
                Fidélité
              </h2>
              
              <div class="loyalty-display">
                <div class="text-center mb-6">
                  <div class="text-3xl font-bold text-primary-500" id="loyalty-points">0</div>
                  <div class="text-white/60">points</div>
                </div>
                
                <div class="mb-4">
                  <div class="flex justify-between text-sm mb-2">
                    <span class="text-white/70">Niveau actuel</span>
                    <span id="loyalty-tier" class="text-primary-400 font-semibold">Bronze</span>
                  </div>
                  <div class="w-full bg-white/20 rounded-full h-2">
                    <div id="loyalty-progress" class="bg-gradient-to-r from-primary-600 to-primary-500 h-2 rounded-full transition-all duration-1000" style="width: 0%"></div>
                  </div>
                  <div class="text-xs text-white/60 mt-1" id="loyalty-next">
                    Prochain niveau: Argent (500 points)
                  </div>
                </div>
                
                <div class="text-center">
                  <a href="/fidelite" class="text-primary-500 hover:text-primary-400 text-sm">
                    Voir les récompenses disponibles
                  </a>
                </div>
              </div>
            </div>

            <!-- Quick Stats -->
            <div class="profile-card">
              <h2 class="text-xl font-bold text-white mb-6">Statistiques</h2>
              
              <div class="space-y-4">
                <div class="flex justify-between items-center">
                  <span class="text-white/70">Commandes totales</span>
                  <span id="total-orders" class="font-semibold text-white">0</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-white/70">Montant dépensé</span>
                  <span id="total-spent" class="font-semibold text-primary-500">0€</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-white/70">Panier moyen</span>
                  <span id="avg-order" class="font-semibold text-white">0€</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-white/70">Membre depuis</span>
                  <span id="member-since" class="font-semibold text-white">-</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>

<style>
  .profile-card {
    @apply p-8 bg-white/5 backdrop-blur-sm rounded-2xl border border-white/10;
  }
  
  .form-input {
    @apply w-full px-4 py-3 bg-white/5 border border-white/20 rounded-xl text-white placeholder-white/50 focus:outline-none focus:border-primary-600 focus:bg-white/10 transition-all duration-300;
  }
  
  .btn-primary {
    @apply px-6 py-3 bg-gradient-to-r from-primary-600 to-primary-700 text-white font-semibold rounded-xl hover:scale-105 transition-transform;
  }
  
  .order-item {
    @apply p-4 bg-white/5 rounded-xl border border-white/10 hover:bg-white/10 transition-colors;
  }
</style>

<script>
  import { AuthService } from '../lib/auth-static';
  import { OrderService } from '../lib/orders-static';

  let currentUser = null;
  let userProfile = null;

  async function loadUserData() {
    try {
      currentUser = await AuthService.getCurrentUser();
      if (!currentUser) {
        window.location.href = '/';
        return;
      }

      userProfile = await AuthService.getUserProfile(currentUser.id);
      populateForm();
      loadOrderHistory();
      updateLoyaltyDisplay();
      updateStats();
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  }

  function populateForm() {
    if (!userProfile) return;

    const form = document.getElementById('profile-form');
    if (!form) return;

    form.firstName.value = userProfile.first_name || '';
    form.lastName.value = userProfile.last_name || '';
    form.email.value = userProfile.email || '';
    form.phone.value = userProfile.phone || '';
    form.address.value = userProfile.address || '';
    form.city.value = userProfile.city || '';
    form.postalCode.value = userProfile.postal_code || '';
  }

  async function loadOrderHistory() {
    if (!currentUser) return;

    try {
      const orders = await OrderService.getUserOrders(currentUser.id);
      displayOrderHistory(orders);
    } catch (error) {
      console.error('Error loading order history:', error);
    }
  }

  function displayOrderHistory(orders) {
    const container = document.getElementById('order-history');
    if (!container) return;

    if (orders.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8 text-white/60">
          <Package size={48} class="mx-auto mb-4 opacity-50" />
          <p>Aucune commande pour le moment</p>
          <a href="/menu" class="text-primary-500 hover:text-primary-400 mt-2 inline-block">
            Passer votre première commande
          </a>
        </div>
      `;
      return;
    }

    container.innerHTML = orders.slice(0, 5).map(order => `
      <div class="order-item">
        <div class="flex items-center justify-between mb-3">
          <div>
            <h4 class="font-semibold text-white">#${order.order_number}</h4>
            <p class="text-sm text-white/60">${new Date(order.created_at).toLocaleDateString('fr-FR')}</p>
          </div>
          <div class="text-right">
            <p class="font-bold text-primary-500">${order.total_amount.toFixed(2)}€</p>
            <span class="px-2 py-1 text-xs rounded-full ${getStatusColor(order.status)}">${getStatusText(order.status)}</span>
          </div>
        </div>
        
        <div class="text-sm text-white/70">
          ${order.items?.slice(0, 2).map(item => `${item.quantity}x ${item.product.name}`).join(', ')}
          ${order.items?.length > 2 ? ` et ${order.items.length - 2} autre(s)` : ''}
        </div>
      </div>
    `).join('');

    if (orders.length > 5) {
      container.innerHTML += `
        <div class="text-center pt-4">
          <button class="text-primary-500 hover:text-primary-400 text-sm">
            Voir toutes les commandes (${orders.length})
          </button>
        </div>
      `;
    }
  }

  function updateLoyaltyDisplay() {
    if (!userProfile) return;

    document.getElementById('loyalty-points').textContent = userProfile.loyalty_points.toString();
    document.getElementById('loyalty-tier').textContent = getTierText(userProfile.loyalty_tier);
    
    const progress = calculateLoyaltyProgress(userProfile.loyalty_points, userProfile.loyalty_tier);
    document.getElementById('loyalty-progress').style.width = `${progress.percentage}%`;
    document.getElementById('loyalty-next').textContent = progress.nextText;
  }

  async function updateStats() {
    if (!currentUser) return;

    try {
      const orders = await OrderService.getUserOrders(currentUser.id);
      const totalOrders = orders.length;
      const totalSpent = orders.reduce((sum, order) => sum + order.total_amount, 0);
      const avgOrder = totalOrders > 0 ? totalSpent / totalOrders : 0;

      document.getElementById('total-orders').textContent = totalOrders.toString();
      document.getElementById('total-spent').textContent = `${totalSpent.toFixed(2)}€`;
      document.getElementById('avg-order').textContent = `${avgOrder.toFixed(2)}€`;
      document.getElementById('member-since').textContent = new Date(userProfile.created_at).toLocaleDateString('fr-FR');
    } catch (error) {
      console.error('Error updating stats:', error);
    }
  }

  function calculateLoyaltyProgress(points, tier) {
    const tiers = {
      bronze: { min: 0, max: 499, next: 'Argent' },
      silver: { min: 500, max: 1999, next: 'Or' },
      gold: { min: 2000, max: 4999, next: 'Platine' },
      platinum: { min: 5000, max: Infinity, next: null }
    };

    const currentTier = tiers[tier];
    if (!currentTier || !currentTier.next) {
      return { percentage: 100, nextText: 'Niveau maximum atteint' };
    }

    const progress = ((points - currentTier.min) / (currentTier.max - currentTier.min + 1)) * 100;
    const pointsNeeded = currentTier.max + 1 - points;

    return {
      percentage: Math.min(progress, 100),
      nextText: `Prochain niveau: ${currentTier.next} (${pointsNeeded} points)`
    };
  }

  function getTierText(tier) {
    const texts = {
      bronze: 'Bronze',
      silver: 'Argent',
      gold: 'Or',
      platinum: 'Platine'
    };
    return texts[tier] || tier;
  }

  function getStatusColor(status) {
    const colors = {
      pending: 'bg-yellow-600/20 text-yellow-400',
      confirmed: 'bg-blue-600/20 text-blue-400',
      preparing: 'bg-orange-600/20 text-orange-400',
      ready: 'bg-green-600/20 text-green-400',
      delivered: 'bg-green-600/20 text-green-400',
      cancelled: 'bg-red-600/20 text-red-400'
    };
    return colors[status] || colors.pending;
  }

  function getStatusText(status) {
    const texts = {
      pending: 'En attente',
      confirmed: 'Confirmée',
      preparing: 'En préparation',
      ready: 'Prête',
      delivered: 'Livrée',
      cancelled: 'Annulée'
    };
    return texts[status] || status;
  }

  // Form submission
  document.getElementById('profile-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    try {
      await AuthService.updateProfile({
        firstName: formData.get('firstName'),
        lastName: formData.get('lastName'),
        phone: formData.get('phone'),
        address: formData.get('address'),
        city: formData.get('city'),
        postalCode: formData.get('postalCode')
      });

      // Reload user data
      userProfile = await AuthService.getUserProfile(currentUser.id);
      
      showNotification('Profil mis à jour avec succès', 'success');
    } catch (error) {
      console.error('Error updating profile:', error);
      showNotification('Erreur lors de la mise à jour', 'error');
    }
  });

  function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `fixed top-20 right-4 px-6 py-3 rounded-xl text-white z-50 transition-all duration-300 ${type === 'success' ? 'bg-green-600' : 'bg-red-600'}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      notification.style.opacity = '0';
    }, 3000);
    
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 3500);
  }

  // Load user data on page load
  loadUserData();
</script>
</div>