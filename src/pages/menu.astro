---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import ProductCard from '../components/ProductCard.astro';
import Footer from '../components/Footer.astro';
import { ContentProductService } from '../lib/content-products';

// Load data at build time using Content Layer
const categories = await ContentProductService.getCategories();
const products = await ContentProductService.getProducts();
---

<Layout>
	<Header />
	<main class="pt-16">
		<!-- Hero Section -->
		<section class="relative py-20 px-4 sm:px-6 lg:px-8 overflow-hidden">
			<div class="absolute inset-0 bg-gradient-to-br from-dark-950 via-dark-900 to-primary-950"></div>
			<div class="absolute inset-0 bg-[url('https://images.pexels.com/photos/357756/pexels-photo-357756.jpeg')] bg-cover bg-center opacity-10"></div>
			
			<div class="relative z-10 max-w-4xl mx-auto text-center">
				<h1 class="text-5xl sm:text-6xl font-bold mb-6 bg-gradient-to-r from-white to-primary-500 bg-clip-text text-transparent">
					Notre Menu
				</h1>
				<p class="text-xl text-white/70 max-w-2xl mx-auto">
					D√©couvrez notre s√©lection de sushis authentiques, pr√©par√©s avec passion par nos ma√Ætres sushi
				</p>
			</div>
		</section>
		
		<!-- Menu Categories -->
		<section class="py-16 px-4 sm:px-6 lg:px-8">
			<div class="max-w-7xl mx-auto">
				<!-- Category filters -->
				<div class="flex flex-wrap justify-center gap-4 mb-12 scroll-reveal" id="category-filters">
					<button class="filter-btn active" data-filter="all">Tout</button>
					<!-- Categories will be loaded dynamically -->
				</div>
				
				<!-- Products grid -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="products-grid">
					<!-- Products will be loaded dynamically -->
				</div>
			</div>
		</section>
	</main>
	<Footer />
</Layout>

<style>
	.filter-btn {
		@apply px-6 py-3 rounded-full font-medium transition-all duration-300 border border-white/20;
		background: rgba(255, 255, 255, 0.05);
		color: rgba(255, 255, 255, 0.7);
	}
	
	.filter-btn:hover {
		@apply border-primary-600/50 text-white;
		background: rgba(220, 38, 38, 0.1);
	}
	
	.filter-btn.active {
		@apply bg-primary-600 text-white border-primary-600;
		box-shadow: 0 0 20px rgba(220, 38, 38, 0.3);
	}
</style>

<script define:vars={{ categories, products }}>
	// Data is now loaded at build time and passed from server
	let filteredProducts = [...products];

	function renderCategoryFilters() {
		const filtersContainer = document.getElementById('category-filters');
		if (!filtersContainer) return;

		categories.forEach(category => {
			const button = document.createElement('button');
			button.className = 'filter-btn';
			button.setAttribute('data-filter', category.id);
			button.textContent = category.name;
			filtersContainer.appendChild(button);
		});

		// Add event listeners
		filtersContainer.addEventListener('click', (e) => {
			if (e.target.classList.contains('filter-btn')) {
				handleFilterClick(e.target);
			}
		});
	}

	function renderProducts() {
		const grid = document.getElementById('products-grid');
		if (!grid) return;

		if (filteredProducts.length === 0) {
			grid.innerHTML = `
				<div class="col-span-full text-center py-12 text-white/60">
					<div class="text-4xl mb-4">üç£</div>
					<p>Aucun produit disponible pour le moment</p>
				</div>
			`;
			return;
		}

		grid.innerHTML = filteredProducts.map((product, index) => `
			<div class="product-card group relative bg-white/5 backdrop-blur-sm rounded-2xl overflow-hidden hover:bg-white/10 transition-all duration-500 hover:scale-105 hover:shadow-2xl ${product.is_popular ? 'ring-2 ring-primary-600/50' : ''}" 
				 data-category="${product.category_id}" 
				 style="animation-delay: ${index * 0.1}s">
				
				${product.is_popular ? `
					<div class="absolute top-4 left-4 z-10 bg-primary-600 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center gap-1">
						<svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
							<polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
						</svg>
						Populaire
					</div>
				` : ''}
				
				<div class="aspect-video overflow-hidden">
					<img 
						src="${product.image_url}" 
						alt="${product.name}"
						class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
						loading="lazy"
					/>
				</div>
				
				<div class="p-6">
					<h3 class="text-xl font-semibold mb-2 text-white group-hover:text-primary-400 transition-colors">
						${product.name}
					</h3>
					<p class="text-white/70 text-sm mb-4 leading-relaxed">
						${product.description}
					</p>
					
					${product.allergens && product.allergens.length > 0 ? `
						<div class="mb-4">
							<div class="flex flex-wrap gap-1">
								${product.allergens.map(allergen => `
									<span class="px-2 py-1 bg-yellow-600/20 text-yellow-400 text-xs rounded-full">${allergen}</span>
								`).join('')}
							</div>
						</div>
					` : ''}
					
					<div class="flex items-center justify-between">
						<span class="text-2xl font-bold text-primary-500">
							${product.base_price.toFixed(2)}‚Ç¨
						</span>
						
						<button class="add-to-cart-btn relative overflow-hidden bg-primary-600 hover:bg-primary-700 text-white p-3 rounded-full transition-all duration-300 hover:scale-110 hover:shadow-lg" 
								onclick="openProductModal('${product.id}')">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
								<line x1="12" y1="5" x2="12" y2="19"></line>
								<line x1="5" y1="12" x2="19" y2="12"></line>
							</svg>
							<div class="absolute inset-0 bg-white/20 transform scale-0 transition-transform duration-300 rounded-full"></div>
						</button>
					</div>
				</div>
				
				<!-- Hover overlay -->
				<div class="absolute inset-0 bg-gradient-to-t from-primary-900/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
			</div>
		`).join('');
	}

	function handleFilterClick(button) {
		// Update active button
		document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
		button.classList.add('active');
		
		// Filter products
		const filter = button.getAttribute('data-filter');
		
		if (filter === 'all') {
			filteredProducts = [...products];
		} else {
			filteredProducts = products.filter(product => product.category_id === filter);
		}
		
		renderProducts();
	}
	
	// Global function for opening product modal
	(window as any).openProductModal = (productId) => {
		if (typeof window !== 'undefined' && (window as any).openProductModal) {
			(window as any).openProductModal(productId);
		}
	};

	// Initialize on page load
	document.addEventListener('DOMContentLoaded', () => {
		renderCategoryFilters();
		renderProducts();
	});
</script>